#include <Encoder.h>
#include <Adafruit_NeoPixel.h>

#define LED_PIN_WHITE 5            // Pin for white LED strip
#define LED_PIN_RGB 9              // Pin for RGB LED strip
#define NUM_LEDS 120               // Number of LEDs in RGB strip
#define BRIGHTNESS 255             // Maximum brightness for RGB
#define WHEEL_SIZE 256             // Color wheel size for RGB effect
#define ENCODER_PIN_1 2            // Rotary encoder pin A
#define ENCODER_PIN_2 3            // Rotary encoder pin B
#define ENCODER_BUTTON 4           // Encoder button pin
#define FADESPEED 1                // Optional: Adjust for response smoothness

Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_LEDS, LED_PIN_RGB, NEO_RGB + NEO_KHZ800);
Encoder encoder(ENCODER_PIN_1, ENCODER_PIN_2);
long lastPush = 0;
int mode = 0;                      // Mode to cycle between off, white, and RGB
int brightness = 255;              // Start white LED at full brightness
int initialEncoderPosition = 0;    // Track encoder start position for smooth dimming

void initializeToBlack() {
  for (int i = 0; i < NUM_LEDS; i++) {
    strip.setPixelColor(i, 0);
  }
}

void setup() {
  Serial.begin(9600);
  pinMode(ENCODER_BUTTON, INPUT);
  digitalWrite(ENCODER_BUTTON, HIGH); // turn pullup resistor on

  pinMode(LED_PIN_WHITE, OUTPUT);     // White LED strip pin
  strip.begin();
  initializeToBlack();
  strip.show();
}

void loop() {
  // Check if the button was pressed to switch modes
  int button = digitalRead(ENCODER_BUTTON);
  if (button == 0 && (millis() - lastPush) > 250) {
    lastPush = millis();
    mode = (mode + 1) % 3;            // Cycle between 0 (off), 1 (white), and 2 (RGB)

    if (mode == 1) {
      // Mode 1: Initialize white LED to full brightness and reset encoder start point
      brightness = 255;                              // Set brightness to 100%
      analogWrite(LED_PIN_WHITE, brightness);        // Immediately turn on full brightness
      initialEncoderPosition = encoder.read();       // Set current encoder position as start point
    } else {
      analogWrite(LED_PIN_WHITE, 0);                 // Ensure white LED is off in other modes
    }
  }

  // Mode 0: Both lights off
  if (mode == 0) {
    analogWrite(LED_PIN_WHITE, 0);  // Turn off white LED strip
    initializeToBlack();            // Turn off RGB strip
    strip.show();
  }

  // Mode 1: White LED strip with smooth dimming control
  else if (mode == 1) {
    long currentEncoderPosition = encoder.read();
    int encoderDelta = currentEncoderPosition - initialEncoderPosition;

    // Map encoder delta to brightness, starting from 255 and dimming smoothly
    brightness = 255 - abs(encoderDelta) % 256;
    brightness = max(brightness, 0);  // Ensure brightness doesn't go below 0

    // Update white LED brightness
    analogWrite(LED_PIN_WHITE, brightness);
    delay(FADESPEED);  // Optional: Adjust for desired smoothness

    // Ensure RGB strip is off
    initializeToBlack();
    strip.show();
  }

  // Mode 2: RGB LED strip with rainbow effect
  else if (mode == 2) {
    long knobValue = encoder.read() / 2;
    long colorValue = knobValue % WHEEL_SIZE;

    // Update RGB strip with a rainbow effect
    for (int i = 0; i < NUM_LEDS; i++) {
      strip.setPixelColor(i, colorWheel(BRIGHTNESS, colorValue));
    }
    strip.show();

    // Ensure white LED strip is off
    analogWrite(LED_PIN_WHITE, 0);
  }
}

// Given a wheel position in 0-255 range, returns a rainbow color adjusted by intensity 0 to 1.0
uint32_t colorWheel(float intensity, byte wheelPos) {
  const int WHEEL_THIRD = (WHEEL_SIZE - 1) / 3;

  if (intensity < 0.0) intensity = 0.0;
  if (intensity > 1.0) intensity = 1.0;

  byte colorIndex = (wheelPos % WHEEL_THIRD) * 3;
  int fadeColor = (255 - colorIndex) * intensity;
  int increaseColor = colorIndex * intensity;

  switch (wheelPos / WHEEL_THIRD) {
    case 0:
      return Adafruit_NeoPixel::Color(fadeColor, 0, increaseColor);
    case 1:
      return Adafruit_NeoPixel::Color(0, increaseColor, fadeColor);
    case 2:
      return Adafruit_NeoPixel::Color(increaseColor, fadeColor, 0);
  }
}
